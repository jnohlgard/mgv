#!/bin/sh
set -euo pipefail

usage() {
  printf 'Usage: %s [manifest-file] <command> <destination-file1> [... <destination-fileN>]\n\n' "$0"
  printf 'Download the given files and verify against the manifest-file\n'
  printf 'manifest-file defaults to "Manifest" if not provided\n'
  printf 'Inspired by Gentoo Manifest2 format, see GLEP-74: https://www.gentoo.org/glep/glep-0074.html\n'
  printf 'Only the DIST tag is supported\n'
  printf 'Currently supported checksum tags:\n'
  printf ' - %s\n' MD5 SHA1 SHA256 SHA512 BLAKE2B
}

if [ "$#" -lt 1 ] || [ "$1" = '--help' ]; then
  >&2 usage
  exit 1
fi

resume_download_to=
if command -v curl 2>&1 >/dev/null; then
  resume_download_to='curl -R -C - -f -L -o'
elif command -v wget 2>&1 >/dev/null; then
  resume_download_to='wget --timestamping -c -O'
else
  >&2 printf 'Required: curl or wget\n'
  exit 1
fi

cmd_check_md5='md5sum -c'
cmd_check_sha1='sha1sum -c'
cmd_check_sha256='sha256sum -c'
cmd_check_sha512='sha512sum -c'
cmd_check_blake2b='b2sum -c'

# Set to 1 for debugging
verbose_verify=0

manifest_file=Manifest

is_manifest_file() {
  [ -r "$1" ] && [ "$(head -c 4 "$1" 2>/dev/null || true)" = 'DIST' ]
}

download_files() {
  if [ "$#" -lt 1 ]; then
    printf 'Usage: download_files <destination-file1> [... <destination-fileN>]\n'
    printf 'Download the files given from the URLs found in the <destination-file>.src-uri file\n'
    printf 'Only URLs understood by curl (or wget) are supported\n'
    exit 1
  fi
  ret=0
  while [ "$#" -gt 0 ]; do
    # strip .src-uri ending on the destination file (convenience when using tab completion)
    dest_file=${1%%.src-uri};shift
    src_uri_file=${dest_file}.src-uri
    download_file=${dest_file}.download
    if [ ! -r "${src_uri_file}" ]; then
      >&2 printf '%s: not a file\n' "${src_uri_file}"
      return 1
    fi
    src_uri=
    while read -r line; do
      if [ -z "${line}" ] || [ "${line:0:1}" = '#' ]; then
        continue
      fi
      src_uri=${line}
    done < "${src_uri_file}"
    if [ -z "${src_uri}" ]; then
      >&2 printf 'Error: Missing URL in %s\n' "${src_uri_file}"
      return 1
    fi
    touch "${dest_file}"
    code=0
    ${resume_download_to} "${download_file}" "${src_uri}" && \
    mv "${download_file}" "${dest_file}" || code=$?
    if [ "${code}" -ne 0 ]; then
      ret=${code}
      >&2 printf 'Download failed: %s\n' "${dest_file}"
    fi
  done
  return ${ret}
}

verify_checksums() {
  if [ "$#" -lt 1 ]; then
    printf 'Usage: verify_checksums <filename> [<checksum type 1> <checksum value 1>] [...]\n'
    exit 1
  fi
  filename=$1;shift
  checksum_type=
  checksum_value=
  for v in "$@"; do
    if [ -z "${checksum_type}" ]; then
      checksum_type=$v
      continue
    fi
    checksum_value=$v
    #printf 'type: %s, value: %s\n' "${checksum_type}" "${checksum_value}"
    printf '%s: ' "${checksum_type}"
    case "${checksum_type}" in
      MD5)
        printf '%s *%s\n' "${checksum_value}" "${filename}" | ${cmd_check_md5} || return 1
        ;;
      SHA1)
        printf '%s *%s\n' "${checksum_value}" "${filename}" | ${cmd_check_sha1} || return 1
        ;;
      SHA256)
        printf '%s *%s\n' "${checksum_value}" "${filename}" | ${cmd_check_sha256} || return 1
        ;;
      SHA512)
        printf '%s *%s\n' "${checksum_value}" "${filename}" | ${cmd_check_sha512} || return 1
        ;;
      BLAKE2B)
        printf '%s *%s\n' "${checksum_value}" "${filename}" | ${cmd_check_blake2b} || return 1
        ;;
      *)
        printf 'not checked\n'
        ;;
    esac
    checksum_type=
  done
}

verify_files() {
  if [ "$#" -lt 1 ]; then
    >&2 printf 'Usage: verify_files <file1> [... <fileN>]\n'
    exit 1
  fi
  # suboptimal but simple N*M solution
  ret=0
  for filename in "$@"; do
    filename_base="$(basename "${filename}")"
    actual_size=$(wc -c < "${filename}")
    result=
    found=0
    code=0
    while read -r tag filename_in_manifest expected_size checksums; do
      if [ "${verbose_verify}" -ne 0 ]; then
        printf 'tag: <%s>, filename: <%s>, size: <%s>, checksums: <%s>\n' "${tag}" "${filename_in_manifest}" "${expected_size}" "${checksums}"
      fi
      if [ "${tag}" != "DIST" ]; then
        continue
      fi
      if [ "${filename_in_manifest}" != "${filename_base}" ]; then
        continue
      fi
      found=1
      if [ "${expected_size}" != "-" ]; then
        if [ "${expected_size}" -ne "${actual_size}" ]; then
          >&2 printf '%s: Size mismatch, expected %d, actual %d\n' "${filename}"
          result='Size mismatch'
          code=2
          break
        fi
      fi
      verify_code=0
      # NB we want expansion of ${checksums} into multiple arguments on the function call below
      if [ "${verbose_verify}" -eq 0 ]; then
        verify_checksums "${filename}" ${checksums} > /dev/null || verify_code=$?
      else
        verify_checksums "${filename}" ${checksums} || verify_code=$?
      fi
      if [ "${verify_code}" -ne 0 ]; then
        result='Checksum failure'
        code=${verify_code}
        break
      fi
      result=OK
    done < "${manifest_file}"
    if [ "${found}" -eq 0 ]; then
      result="Not found in manifest ${manifest_file}"
      code=8
    fi
    if [ -z "${result}" ]; then
      printf 'Not checked: %s\n' "${filename}"
    else
      printf '%s: %s\n' "${filename}" "${result}"
    fi
    if [ "${code}" -ne 0 ]; then
      ret=${code}
    fi
  done
  return ${ret}
}

cmd_get() {
  printf 'Using manifest file: %s\n' "${manifest_file}"
  if [ "$#" -lt 1 ]; then
    >&2 printf 'Usage: get <filename1> [<filename2> ...]\n'
    exit 2
  fi
  ret=0
  for dest in "$@"; do
    dest_file=${dest%%.src-uri}
    code=0
    download_files "${dest_file}" || code=$?
    if [ "${code}" -ne 0 ]; then
      ret=${code}
      continue
    fi
    verify_files "${dest_file}" || code=$?
    if [ "${code}" -ne 0 ]; then
      mv -f "${dest_file}" "${dest_file}.verify-failed"
      ret=${code}
      continue
    fi
  done
  exit ${ret}
}

cmd_verify() {
  printf 'Using manifest file: %s\n' "${manifest_file}"
  verify_files "$@"
}

cmd_digest() {
  >&2 printf 'Not implemented yet!\n'
  exit 2
}

cmd_inject() {
  >&2 printf 'Not implemented yet!\n'
  exit 2
}

if is_manifest_file "$1"; then
  manifest_file=$1; shift
fi

case "$1" in
  get) shift; cmd_get "$@";;
  verify) shift; cmd_verify "$@";;
  digest) shift; cmd_digest "$@";;
  inject) shift; cmd_inject "$@";;
  *) cmd_get "$@";;
esac
