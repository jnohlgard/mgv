#!/bin/sh
set -euo pipefail

usage() {
  printf 'Usage: %s <command> <destination-file1> [... <destination-fileN>]\n\n' "${0##*/}"
  printf 'Download the given files and verify checksums\n'
  printf 'Supported checksum tags:\n'
  printf ' - %s\n' MD5 SHA1 SHA224 SHA256 SHA384 SHA512 BLAKE2B
}

if [ "$#" -lt 1 ] || [ "$1" = '--help' ]; then
  >&2 usage
  exit 2
fi

resume_download_to=
if command -v curl 2>&1 >/dev/null; then
  resume_download_to='curl -R -C - -f -L -o'
elif command -v wget 2>&1 >/dev/null; then
  resume_download_to='wget --timestamping -c -O'
else
  >&2 printf 'Required: curl or wget\n'
  exit 1
fi

cmd_check_md5='md5sum -c'
cmd_check_sha1='sha1sum -c'
cmd_check_sha224='sha224sum -c'
cmd_check_sha256='sha256sum -c'
cmd_check_sha384='sha384sum -c'
cmd_check_sha512='sha512sum -c'
cmd_check_sha3_256='sha3sum -A 256 -c'
cmd_check_sha3_512='sha3sum -A 512 -c'
cmd_check_blake2b='b2sum -c'

download_file() {
  if [ "$#" -ne 2 ]; then
    printf 'Usage: download_file <destination-file> <URL>\n'
    printf 'Only URLs understood by curl (or wget) are supported\n'
    exit 1
  fi
  dest_file=$1
  url=$2
  download_file=${dest_file}.download
  touch "${dest_file}"
  code=0
  ${resume_download_to} "${download_file}" "${url}" && \
  mv "${download_file}" "${dest_file}" || code=$?
  if [ "${code}" -ne 0 ]; then
    >&2 printf 'Download failed: %s\n' "${dest_file}"
  fi
  return ${code}
}

check_size() {
  if [ "$#" -ne 2 ]; then
    printf 'Usage: check_size <filename> <size>\n'
    exit 2
  fi
  filename=$1
  expected_size=$2
  if ! [ -r "${filename}" ]; then
    return 1
  fi
  if [ "${expected_size}" = "-" ]; then
    # Ignore size
    return 0
  fi
  actual_size=$(wc -c <"${filename}")
  [ "${expected_size}" -eq "${actual_size}" ]
}

verify_file() {
  if [ "$#" -lt 2 ]; then
    printf 'Usage: verify_file <filename> [<checksum type 1> <checksum value 1>] [...]\n'
    exit 2
  fi
  filename=$1;shift
  while [ "$#" -ge 2 ]; do
    checksum_type=$1
    checksum_value=$2
    shift 2
    #printf 'type: %s, value: %s\n' "${checksum_type}" "${checksum_value}"
    printf '%s: ' "${checksum_type}"
    case "${checksum_type}" in
      MD5)
        printf '%s *%s\n' "${checksum_value}" "${filename}" | ${cmd_check_md5} || return $?
        ;;
      SHA1)
        printf '%s *%s\n' "${checksum_value}" "${filename}" | ${cmd_check_sha1} || return $?
        ;;
      SHA224)
        printf '%s *%s\n' "${checksum_value}" "${filename}" | ${cmd_check_sha224} || return $?
        ;;
      SHA256)
        printf '%s *%s\n' "${checksum_value}" "${filename}" | ${cmd_check_sha256} || return $?
        ;;
      SHA384)
        printf '%s *%s\n' "${checksum_value}" "${filename}" | ${cmd_check_sha384} || return $?
        ;;
      SHA512)
        printf '%s *%s\n' "${checksum_value}" "${filename}" | ${cmd_check_sha512} || return $?
        ;;
      SHA3_256)
        printf '%s *%s\n' "${checksum_value}" "${filename}" | ${cmd_check_sha3_256} || return $?
        ;;
      SHA3_512)
        printf '%s *%s\n' "${checksum_value}" "${filename}" | ${cmd_check_sha3_512} || return $?
        ;;
      BLAKE2B)
        printf '%s *%s\n' "${checksum_value}" "${filename}" | ${cmd_check_blake2b} || return $?
        ;;
      *)
        printf 'not checked\n'
        ;;
    esac
  done
  if [ "$#" -ne 0 ]; then
    >&2 printf 'Error: extra checksum argument "%s"\n' "$@"
    return 2
  fi
}

do_download=1

cmd_get() {
  if [ "$#" -lt 1 ]; then
    >&2 printf 'Usage: mgv get <filename1> [<filename2> ...]\n'
    exit 2
  fi
  ret=0
  for dest in "$@"; do
    if [ -r "${dest}.mgv" ]; then
      mgv_file=${dest}.mgv
    else
      mgv_file=${dest}
    fi
    if [ "${dest%/*}" != "${dest}" ]; then
      download_path="${dest%/*}"
    else
      download_path=$(pwd)
    fi
    while read kind filename expected_size url_tag url checksums; do
      case "${kind}" in
        # skip comments
        '#'*) continue;;
        DIST) ;;
        *)
          >&2 printf 'Unknown tag "%s"\n' "${kind}"
          return 1
          ;;
      esac
      case "${filename}" in
        */*)
          >&2 printf 'No slashes allowed in filename: %s\n' "${filename}"
          return 1
          ;;
      esac
      filename="${download_path}/${filename}"
      printf 'File: %s\n' "${filename}"
      if [ "${url_tag}" != "URL" ]; then
        >&2 printf 'Expected "URL" after file size, got "%s"\n' "${url_tag}"
        return 1
      fi
      if [ "${do_download}" -ne 0 ]; then
        if check_size "${filename}" "${expected_size}" 2>/dev/null; then
          # NB: no quotes on ${checksums} because we want to expand to separate arguments
          if verify_file "${filename}" ${checksums}; then
            # Already downloaded
            continue
          fi
          printf 'Retrying download\n'
        fi
        download_file "${filename}" "${url}"
      fi
      if ! check_size "${filename}" "${expected_size}"; then
        ret=$?
        >&2 printf '%s: Size mismatch, expected %d bytes\n' "${filename}" "${expected_size}"
        continue
      fi
      # NB: no quotes on ${checksums} because we want to expand to separate arguments
      if ! verify_file "${filename}" ${checksums}; then
        ret=$?
        >&2 printf '%s: Checksum verification failed\n' "${filename}"
        mv -f "${filename}" "${filename}.verify-failed"
      fi
    done <"${mgv_file}"
  done
  return ${ret}
}

cmd_verify() {
  do_download=0
  cmd_get "$@"
}

cmd_digest() {
  >&2 printf 'Not implemented yet!\n'
  exit 2
}

cmd_inject() {
  >&2 printf 'Not implemented yet!\n'
  exit 2
}

case "$1" in
  get) shift; cmd_get "$@";;
  verify) shift; cmd_verify "$@";;
  digest) shift; cmd_digest "$@";;
  inject) shift; cmd_inject "$@";;
  *) cmd_get "$@";;
esac
